#pragma once

SIMD_INLINE SIMD4F SIMD4F_SUM(SIMD4F v)
{
	const SIMD4F s1 = SIMD4F_ADD(SIMD4F_SET_X(v), SIMD4F_SET_Y(v));
	const SIMD4F s2 = SIMD4F_ADD(s1, SIMD4F_SET_Z(v));
	const SIMD4F s3 = SIMD4F_ADD(s2, SIMD4F_SET_W(v));
	return s3;
}

SIMD_INLINE SIMD4F SIMD4F_DOT4(SIMD4F lhs, SIMD4F rhs)
{
	return SIMD4F_SUM(SIMD4F_MUL(lhs, rhs));
}

SIMD_INLINE float SIMD4F_DOT4_SCALAR(SIMD4F lhs, SIMD4F rhs) 
{
	return SIMD4F_GET_X(SIMD4F_DOT4(lhs, rhs));
}

SIMD_INLINE SIMD4F SIMD4F_DOT2(SIMD4F lhs, SIMD4F rhs)
{
	const SIMD4F m = SIMD4F_MUL(lhs, rhs);
	const SIMD4F s1 = SIMD4F_ADD(SIMD4F_SET_X(m), SIMD4F_SET_Y(m));
	return s1;
}

SIMD_INLINE float SIMD4F_DOT2_SCALAR(SIMD4F lhs, SIMD4F rhs)
{
	return SIMD4F_GET_X(SIMD4F_DOT2(lhs, rhs));
}

SIMD_INLINE SIMD4F SIMD4F_LENGTH4(SIMD4F v) 
{
	return SIMD4F_SQRT(SIMD4F_DOT4(v, v));
}

SIMD_INLINE SIMD4F SIMD4F_LENGTH3(SIMD4F v) 
{
	return SIMD4F_SQRT(SIMD4F_DOT3(v, v));
}

SIMD_INLINE SIMD4F SIMD4F_LENGTH2(SIMD4F v)
{
	return SIMD4F_SQRT(SIMD4F_DOT2(v, v));
}

SIMD_INLINE SIMD4F SIMD4F_LENGTH4_SQUARED(SIMD4F v)
{
	return SIMD4F_DOT4(v, v);
}

SIMD_INLINE SIMD4F SIMD4F_LENGTH3_SQUARED(SIMD4F v) 
{
	return SIMD4F_DOT4(v, v);
}

SIMD_INLINE float SIMD4F_LENGTH3_SQUARED_SCALAR(SIMD4F v) 
{
	return SIMD4F_DOT3_SCALAR(v, v);
}

SIMD_INLINE SIMD4F SIMD4F_NORMALIZE4(SIMD4F a) 
{
	SIMD4F invlen = SIMD4F_RSQRT(SIMD4F_DOT4(a, a));
	return SIMD4F_MUL(a, invlen);
}

SIMD_INLINE SIMD4F SIMD4F_NORMALIZE3(SIMD4F a) 
{
	SIMD4F invlen = SIMD4F_RSQRT(SIMD4F_DOT3(a, a));
	return SIMD4F_MUL(a, invlen);
}

SIMD_INLINE SIMD4F SIMD4F_NORMALIZE2(SIMD4F a) 
{
	SIMD4F invlen = SIMD4F_RSQRT(SIMD4F_DOT2(a, a));
	return SIMD4F_MUL(a, invlen);
}

SIMD_INLINE SIMD4F SIMD4F_LENGTH2_SQUARED(SIMD4F v) 
{
	return SIMD4F_DOT2(v, v);
}